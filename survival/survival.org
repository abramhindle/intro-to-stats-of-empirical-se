#+TITLE: Survival Analysis
#+PROPERTY: header-args:C             :exports both :eval yes :flags -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 :eval yes :results value verbatim
#+PROPERTY: header-args:sh            :exports both :eval yes :results value verbatim
#+PROPERTY: header-args:R             :exports both :eval yes :results output :session
#+PROPERTY: header-args:shell         :exports both :eval yes :results value verbatim

* Survival Analysis
** Copyright Statement

If you are in CMPUT201 at UAlberta this code is released in the public
domain to you.

Otherwise it is (c) 2020 Abram Hindle

*** License

    Survival Analysis
    Copyright (C) 2020 Abram Hindle

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

*** Alternative version

 Checkout the .txt, the .pdf, and the .html version

*** Init ORG-MODE

#+BEGIN_SRC elisp
;; I need this for org-mode to work well
;; If we have a new org-mode use ob-shell
;; otherwise use ob-sh --- but not both!
(if (require 'ob-shell nil 'noerror)
  (progn
    (org-babel-do-load-languages 'org-babel-load-languages '((shell . t))))
  (progn
    (require 'ob-sh)
    (org-babel-do-load-languages 'org-babel-load-languages '((sh . t)))))
(org-babel-do-load-languages
 'org-babel-load-languages
 '((R . t)))
(org-babel-do-load-languages 'org-babel-load-languages '((C . t)))
(org-babel-do-load-languages 'org-babel-load-languages '((python . t)))
(setq org-src-fontify-natively t)
(setq org-confirm-babel-evaluate nil) ;; danger!
(custom-set-faces
 '(org-block ((t (:inherit shadow :foreground "black"))))
 '(org-code ((t (:inherit shadow :foreground "black")))))
(setq org-startup-with-inline-images t)
(setq org-redisplay-inline-images t)
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)   
(add-hook 'org-mode-hook 'org-display-inline-images)   


#+RESULTS:
| org-display-inline-images | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | #[0 \300\301\302\303\304$\207 [add-hook before-save-hook org-encrypt-entries nil t] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | turn-on-font-lock |


*** Org export
#+BEGIN_SRC elisp
(org-html-export-to-html)
(org-latex-export-to-pdf)
(org-ascii-export-to-ascii)
#+END_SRC

#+RESULTS:
: presentation.txt


*** Org Template

#+BEGIN_SRC R 
summary(runif(100))
#+END_SRC

#+RESULTS:
:     Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
: 0.001769 0.279685 0.509540 0.499254 0.720436 0.973900

#+BEGIN_SRC R :session
summary(runif(100))
#+END_SRC

#+RESULTS:
:     Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
: 0.006468 0.265716 0.486299 0.505306 0.790021 0.997170

#+BEGIN_SRC R :results output graphics file :file test2.png
  plot(runif(100))
#+END_SRC

#+RESULTS:
[[file:test2.png]]


#+BEGIN_SRC R :results output graphics file :file test.png
  library("ggplot2")
  ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length, color = Species)) +
  geom_point()
#+END_SRC

#+RESULTS:
[[file:test.png]]




** Survival Analysis
   https://github.com/therneau/survival
   https://cran.r-project.org/web/packages/survival/index.html
   https://cran.r-project.org/web/packages/survival/survival.pdf
*** Survival Data

Let's try it out from the R package

Let's look at what is expected from survival data:

#+BEGIN_SRC R 
library(survival)
aml
#+END_SRC

#+RESULTS:
#+begin_example
   time status             x
1     9      1    Maintained
2    13      1    Maintained
3    13      0    Maintained
4    18      1    Maintained
5    23      1    Maintained
6    28      0    Maintained
7    31      1    Maintained
8    34      1    Maintained
9    45      0    Maintained
10   48      1    Maintained
11  161      0    Maintained
12    5      1 Nonmaintained
13    5      1 Nonmaintained
14    8      1 Nonmaintained
15    8      1 Nonmaintained
16   12      1 Nonmaintained
17   16      0 Nonmaintained
18   23      1 Nonmaintained
19   27      1 Nonmaintained
20   30      1 Nonmaintained
21   33      1 Nonmaintained
22   43      1 Nonmaintained
23   45      1 Nonmaintained
#+end_example

Time is when an event occurs. Status is alive or dead. x is the factor.

This is Leukemia survival data.

*** Surv object 

survfit will fit a model to a survival curve. Surv makes such a curve
out of 2 variables, time and status.

Status is either censoring or death. 0 for censor often, or 1 for death?

#+BEGIN_SRC R
maint <- aml[aml$x=="Maintained",]
Surv(maint$time, maint$status)
maint[maint$status==0,]
#+END_SRC

#+RESULTS:
:  [1]   9   13   13+  18   23   28+  31   34   45+  48  161+
:    time status          x
: 3    13      0 Maintained
: 6    28      0 Maintained
: 9    45      0 Maintained
: 11  161      0 Maintained

*** Plotting Surv object

You can plot the curve and the confidence interval

#+BEGIN_SRC R :results output graphics file :file Surv.png :width 1200 :height 700
maint <- aml[aml$x=="Maintained",]
plot(Surv(maint$time, maint$status))
#+END_SRC

#+RESULTS:
[[file:Surv.png]]


So what does it look like with multiple factors?

#+BEGIN_SRC R :results output graphics file :file leukemia.png :width 1200 :height 700
leukemia.surv <- survfit(Surv(time, status) ~ x, data = aml)
plot(leukemia.surv, lty = 2:3)
legend(100, .9, c("Maintenance", "No Maintenance"), lty = 2:3)
#+END_SRC

#+RESULTS:
[[file:leukemia.png]]

#+BEGIN_SRC R 
leukemia.surv <- survfit(Surv(time, status) ~ x, data = aml)
summary(leukemia.surv)
#+END_SRC

#+RESULTS:
#+begin_example
Call: survfit(formula = Surv(time, status) ~ x, data = aml)

                x=Maintained 
 time n.risk n.event survival std.err lower 95% CI upper 95% CI
    9     11       1    0.909  0.0867       0.7541        1.000
   13     10       1    0.818  0.1163       0.6192        1.000
   18      8       1    0.716  0.1397       0.4884        1.000
   23      7       1    0.614  0.1526       0.3769        0.999
   31      5       1    0.491  0.1642       0.2549        0.946
   34      4       1    0.368  0.1627       0.1549        0.875
   48      2       1    0.184  0.1535       0.0359        0.944

                x=Nonmaintained 
 time n.risk n.event survival std.err lower 95% CI upper 95% CI
    5     12       2   0.8333  0.1076       0.6470        1.000
    8     10       2   0.6667  0.1361       0.4468        0.995
   12      8       1   0.5833  0.1423       0.3616        0.941
   23      6       1   0.4861  0.1481       0.2675        0.883
   27      5       1   0.3889  0.1470       0.1854        0.816
   30      4       1   0.2917  0.1387       0.1148        0.741
   33      3       1   0.1944  0.1219       0.0569        0.664
   43      2       1   0.0972  0.0919       0.0153        0.620
   45      1       1   0.0000     NaN           NA           NA
#+end_example


*** OK but software engineering?

Your times should be time since the start of the intervention or the
birth of a bug. If you want to track project lifetime, make it another
variable. Your record should be if something has quit or if something
has finished.

#+BEGIN_SRC R
library(survival)
bugs <- c()
# time of bug fix
bugs$time   <- c(10,10,10,20,20,30,40,50,60,70,80,90,100)
bugs$status <- c( 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0,  1)
bugs <- data.frame(bugs)
bugs
#+END_SRC

#+RESULTS:
#+begin_example
   time status
1    10      0
2    10      0
3    10      0
4    20      0
5    20      1
6    30      0
7    40      1
8    50      0
9    60      0
10   70      1
11   80      1
12   90      0
13  100      1
#+end_example

#+BEGIN_SRC R :results output graphics file :file Bugs_wo_censor.png :width 1200 :height 700
plot(Surv(bugs$time))
#+END_SRC

#+RESULTS:
[[file:Bugs_wo_censor.png]]

#+BEGIN_SRC R :results output graphics file :file Bugs_w_censor.png :width 1200 :height 700
plot(Surv(bugs$time,bugs$status))
#+END_SRC

#+RESULTS:
[[file:Bugs_w_censor.png]]


*** What about for a lot more bugs?

We're going to invent a dataset where minor revision bugs last longer.

They are fixed later. Which means they survive longer.

#+BEGIN_SRC R :results output graphics file :file RandBugs.png :width 1200 :height 700
bugs <- c()
# bug survival
bugs$time   <- sort(runif(100)*100)
# longer surviving bugs at the end
bugs$time   <- c(bugs$time,sort(bugs$time + runif(100)*50))
# the first half are half minor revisions
# the second half are mostly minor revision bugs and they last a long time
bugs$minor  <- c(sample(c(0,1),100,replace=TRUE),sample(c(1),100,replace=TRUE))
# this is just noise to show what happens with uncorrelated results
bugs$noise  <- sample(c(0,1),200,replace=TRUE)
# minor are censored more
bugs$status <- c(sample(c(1,1,1,0),100,replace=TRUE),sample(c(1,0,0),100,replace=TRUE))
bugs <- data.frame(bugs)
# plot(bugs$time[bugs$status==1])
# plot(bugs$time[bugs$status==0])
plot(Surv(bugs$time,bugs$status))
#+END_SRC

#+RESULTS:
[[file:RandBugs.png]]
#+BEGIN_SRC R :results output graphics file :file SurvFitRandBugs.png :width 1200 :height 700
plot(survfit(Surv(time,status) ~ factor(minor), data = bugs),lty=c(1:2))
legend(100, .9, c("Not minor", "Minor"), lty = 1:2)
#+END_SRC

#+RESULTS:
[[file:SurvFitRandBugs.png]]
#+BEGIN_SRC R
summary(survfit(Surv(time,status) ~ factor(minor), data = bugs))
#+END_SRC

#+RESULTS:
#+begin_example
Call: survfit(formula = Surv(time, status) ~ factor(minor), data = bugs)

                factor(minor)=0 
  time n.risk n.event survival std.err lower 95% CI upper 95% CI
  3.90     53       1   0.9811  0.0187      0.94518        1.000
  4.74     52       1   0.9623  0.0262      0.91231        1.000
  8.39     51       1   0.9434  0.0317      0.88319        1.000
  9.95     49       1   0.9241  0.0365      0.85536        0.998
 13.67     46       1   0.9041  0.0408      0.82746        0.988
 15.63     44       1   0.8835  0.0448      0.79996        0.976
 18.61     42       1   0.8625  0.0484      0.77263        0.963
 20.29     41       1   0.8414  0.0516      0.74616        0.949
 24.38     40       1   0.8204  0.0544      0.72038        0.934
 25.69     39       1   0.7994  0.0569      0.69519        0.919
 27.53     37       1   0.7778  0.0594      0.66969        0.903
 35.81     35       1   0.7555  0.0617      0.64381        0.887
 37.21     34       1   0.7333  0.0637      0.61843        0.870
 38.80     33       1   0.7111  0.0656      0.59351        0.852
 46.64     30       1   0.6874  0.0675      0.56698        0.833
 47.33     29       1   0.6637  0.0692      0.54095        0.814
 50.56     27       1   0.6391  0.0709      0.51420        0.794
 52.25     26       1   0.6145  0.0723      0.48795        0.774
 52.56     25       1   0.5899  0.0735      0.46215        0.753
 55.59     24       1   0.5654  0.0744      0.43680        0.732
 58.62     22       1   0.5397  0.0753      0.41048        0.710
 65.39     18       1   0.5097  0.0769      0.37922        0.685
 66.35     17       1   0.4797  0.0780      0.34880        0.660
 67.53     16       1   0.4497  0.0787      0.31918        0.634
 72.51     14       1   0.4176  0.0793      0.28776        0.606
 75.08     13       1   0.3855  0.0795      0.25734        0.577
 75.14     12       1   0.3534  0.0791      0.22788        0.548
 79.70      9       1   0.3141  0.0794      0.19132        0.516
 83.96      8       1   0.2748  0.0786      0.15688        0.481
 88.03      7       1   0.2356  0.0766      0.12458        0.445
 88.19      6       1   0.1963  0.0732      0.09454        0.408
 90.21      5       1   0.1570  0.0683      0.06699        0.368
 90.80      3       1   0.1047  0.0624      0.03253        0.337
 92.80      2       1   0.0523  0.0484      0.00854        0.321

                factor(minor)=1 
    time n.risk n.event survival std.err lower 95% CI upper 95% CI
   0.429    146       1    0.993 0.00683        0.980        1.000
   3.294    145       1    0.986 0.00962        0.968        1.000
  10.992    143       1    0.979 0.01177        0.957        1.000
  11.865    140       1    0.972 0.01361        0.946        0.999
  13.761    138       1    0.965 0.01522        0.936        0.996
  14.672    136       1    0.958 0.01668        0.926        0.992
  18.094    135       1    0.951 0.01801        0.917        0.987
  19.635    133       1    0.944 0.01924        0.907        0.982
  21.187    130       1    0.937 0.02042        0.898        0.978
  21.978    129       1    0.929 0.02151        0.888        0.973
  24.690    127       1    0.922 0.02255        0.879        0.967
  25.437    126       1    0.915 0.02353        0.870        0.962
  27.557    124       1    0.907 0.02447        0.861        0.957
  28.658    123       1    0.900 0.02536        0.852        0.951
  30.195    122       1    0.893 0.02620        0.843        0.946
  30.865    120       1    0.885 0.02702        0.834        0.940
  31.411    118       1    0.878 0.02781        0.825        0.934
  31.579    117       1    0.870 0.02857        0.816        0.928
  32.975    116       1    0.863 0.02929        0.807        0.922
  33.244    115       1    0.855 0.02998        0.798        0.916
  36.216    113       1    0.848 0.03066        0.790        0.910
  41.636    109       1    0.840 0.03135        0.781        0.904
  43.157    107       1    0.832 0.03202        0.772        0.897
  43.428    106       1    0.824 0.03267        0.763        0.891
  44.106    104       1    0.816 0.03330        0.754        0.884
  45.285    102       1    0.808 0.03392        0.744        0.878
  48.818    101       1    0.800 0.03452        0.735        0.871
  50.273     99       1    0.792 0.03510        0.726        0.864
  50.339     98       1    0.784 0.03566        0.717        0.857
  53.780     94       1    0.776 0.03625        0.708        0.850
  55.014     91       1    0.767 0.03684        0.698        0.843
  55.691     90       1    0.759 0.03740        0.689        0.836
  58.847     88       1    0.750 0.03796        0.679        0.828
  59.343     87       1    0.741 0.03849        0.670        0.821
  60.167     86       1    0.733 0.03899        0.660        0.813
  61.404     81       1    0.724 0.03955        0.650        0.806
  61.479     80       1    0.715 0.04008        0.640        0.798
  61.726     78       1    0.706 0.04060        0.630        0.790
  64.417     72       1    0.696 0.04120        0.620        0.781
  65.929     70       1    0.686 0.04179        0.609        0.773
  67.856     67       1    0.676 0.04240        0.597        0.764
  70.537     66       1    0.665 0.04298        0.586        0.755
  74.051     63       1    0.655 0.04357        0.575        0.746
  77.425     60       1    0.644 0.04419        0.563        0.737
  79.468     55       1    0.632 0.04491        0.550        0.727
  79.876     54       1    0.621 0.04558        0.537        0.717
  80.284     53       1    0.609 0.04620        0.525        0.706
  83.131     50       1    0.597 0.04685        0.512        0.696
  83.249     49       1    0.584 0.04745        0.498        0.685
  83.311     48       1    0.572 0.04800        0.486        0.675
  84.478     46       1    0.560 0.04854        0.472        0.664
  85.067     45       1    0.547 0.04903        0.459        0.652
  86.627     44       1    0.535 0.04947        0.446        0.641
  86.853     43       1    0.523 0.04986        0.433        0.630
  88.066     42       1    0.510 0.05020        0.421        0.619
  88.463     40       1    0.497 0.05054        0.407        0.607
  90.726     37       1    0.484 0.05093        0.394        0.595
  92.881     32       1    0.469 0.05153        0.378        0.581
  93.192     31       1    0.454 0.05204        0.362        0.568
  95.365     28       1    0.437 0.05265        0.346        0.554
 102.459     23       1    0.418 0.05368        0.325        0.538
 109.431     17       1    0.394 0.05588        0.298        0.520
 115.655     11       1    0.358 0.06120        0.256        0.501
 124.915      8       1    0.313 0.06797        0.205        0.479
 129.675      6       1    0.261 0.07403        0.150        0.455
#+end_example

Survfit basically calculates confidence intervals of survival at each point


*** Cox Proportional-Hazards Model

The PMM for minor should be lower than not minor. Because it is less risk. It lets bugs survive longer.

The PMM for noise should be near 1.

#+BEGIN_SRC R
  fit <- coxph(Surv(time,status) ~ factor(minor) + factor(noise), data = bugs)
  summary(fit,rr.ci=TRUE)
  print("yates minor")
  yates(fit, ~ minor, predict="risk") # hazard ratio
  print("yates noise")
  yates(fit, ~ noise, predict="risk") # hazard ratio
#+END_SRC

#+RESULTS:
#+begin_example
Call:
coxph(formula = Surv(time, status) ~ factor(minor) + factor(noise), 
    data = bugs)

  n= 200, number of events= 99 

                  coef exp(coef) se(coef)      z Pr(>|z|)    
factor(minor)1 -0.8958    0.4083   0.2190 -4.090 4.32e-05 ***
factor(noise)1  0.2215    1.2479   0.2027  1.093    0.275    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

               exp(coef) exp(-coef) lower .95 upper .95
factor(minor)1    0.4083     2.4492    0.2658    0.6272
factor(noise)1    1.2479     0.8014    0.8388    1.8565

Concordance= 0.59  (se = 0.032 )
Likelihood ratio test= 15.88  on 2 df,   p=4e-04
Wald test            = 17.37  on 2 df,   p=2e-04
Score (logrank) test = 18.39  on 2 df,   p=1e-04
 factor(minor)     pmm      std               test chisq df       Pr
             0 1.94349 0.332405      factor(minor) 9.213  1 0.002403
             1 0.79351 0.048865
 factor(noise)     pmm     std               test  chisq df     Pr
             0 0.98914 0.10636      factor(noise) 0.9587  1 0.3275
             1 1.23434 0.16303
#+end_example

#+BEGIN_SRC R :results output graphics file :file RandBugsCox.png :width 1200 :height 1200
fit <- coxph(Surv(time,status) ~ factor(minor) + factor(noise), data = bugs)
par(mfrow=c(3,1))
plot(cox.zph(fit)[1]) # plot minor
plot(cox.zph(fit)[2]) # plot noise
plot(survfit(Surv(time,status) ~ factor(minor), data = bugs),lty=c(1:2))
legend(100, .9, c("Not minor", "Minor"), lty = 1:2)
#+END_SRC

#+RESULTS:
[[file:RandBugsCox.png]]
*** Pretty Plots with Survminer

A pain to install (use docker?) https://rpkgs.datanovia.com/survminer/

You could install devtools and run:

#+BEGIN_SRC R :eval no
devtools::install_url("https://github.com/wilkelab/cowplot/archive/0.6.3.zip")
devtools::install_url("https://github.com/cran/mvtnorm/archive/1.0-8.zip")
devtools::install_url("https://github.com/kassambara/survminer/archive/v0.4.3.zip")
#install.packages("survminer")
#+END_SRC

#+BEGIN_SRC R
library(survminer)
#+END_SRC

#+RESULTS:
: Loading required package: ggplot2
: Loading required package: ggpubr

#+BEGIN_SRC R :results output graphics file :file SurvMinerRandBugsCox.png :width 1600 :height 700
library(survival)
library(survminer)
fit <- survfit(Surv(time,status) ~ factor(minor), data = bugs)
ggsurvplot(fit, data = bugs)
#+END_SRC

#+RESULTS:
[[file:SurvMinerRandBugsCox.png]]
*** Better


#+BEGIN_SRC R :results output graphics file :file PrettySurvMinerRandBugsCox.png :width 1600 :height 700
library(survival)
library(survminer)
fit <- survfit(Surv(time,status) ~ factor(minor), data = bugs)
ggsurvplot(
  fit, 
  data = bugs, 
  size = 1,                 # change line size
  palette = 
    c("#E7B800", "#2E9FDF"),# custom color palettes
  conf.int = TRUE,          # Add confidence interval
  pval = TRUE,              # Add p-value
  risk.table = TRUE,        # Add risk table
  risk.table.col = "strata",# Risk table color by groups
  legend.labs = 
    c("Not Minor", "Minor"),    # Change legend labels
  risk.table.height = 0.25, # Useful to change when you have multiple groups
  ggtheme = theme_bw()      # Change ggplot2 theme
)
#+END_SRC

#+RESULTS:
[[file:PrettySurvMinerRandBugsCox.png]]


